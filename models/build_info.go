// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildInfo build info
// swagger:model buildInfo
type BuildInfo struct {

	// build date
	// Required: true
	BuildDate *string `json:"buildDate"`

	// git branch
	// Required: true
	GitBranch *string `json:"gitBranch"`

	// git commit
	// Required: true
	GitCommit *string `json:"gitCommit"`

	// git state
	// Required: true
	GitState *string `json:"gitState"`

	// git summary
	// Required: true
	GitSummary *string `json:"gitSummary"`
}

// Validate validates this build info
func (m *BuildInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitCommit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildInfo) validateBuildDate(formats strfmt.Registry) error {

	if err := validate.Required("buildDate", "body", m.BuildDate); err != nil {
		return err
	}

	return nil
}

func (m *BuildInfo) validateGitBranch(formats strfmt.Registry) error {

	if err := validate.Required("gitBranch", "body", m.GitBranch); err != nil {
		return err
	}

	return nil
}

func (m *BuildInfo) validateGitCommit(formats strfmt.Registry) error {

	if err := validate.Required("gitCommit", "body", m.GitCommit); err != nil {
		return err
	}

	return nil
}

func (m *BuildInfo) validateGitState(formats strfmt.Registry) error {

	if err := validate.Required("gitState", "body", m.GitState); err != nil {
		return err
	}

	return nil
}

func (m *BuildInfo) validateGitSummary(formats strfmt.Registry) error {

	if err := validate.Required("gitSummary", "body", m.GitSummary); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildInfo) UnmarshalBinary(b []byte) error {
	var res BuildInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
