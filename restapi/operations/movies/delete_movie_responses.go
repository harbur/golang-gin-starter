// Code generated by go-swagger; DO NOT EDIT.

package movies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/harbur/golang-gin-starter/models"
)

// DeleteMovieOKCode is the HTTP code returned for type DeleteMovieOK
const DeleteMovieOKCode int = 200

/*DeleteMovieOK OK

swagger:response deleteMovieOK
*/
type DeleteMovieOK struct {
}

// NewDeleteMovieOK creates DeleteMovieOK with default headers values
func NewDeleteMovieOK() *DeleteMovieOK {

	return &DeleteMovieOK{}
}

// WriteResponse to the client
func (o *DeleteMovieOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteMovieNotFoundCode is the HTTP code returned for type DeleteMovieNotFound
const DeleteMovieNotFoundCode int = 404

/*DeleteMovieNotFound Not Found

swagger:response deleteMovieNotFound
*/
type DeleteMovieNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteMovieNotFound creates DeleteMovieNotFound with default headers values
func NewDeleteMovieNotFound() *DeleteMovieNotFound {

	return &DeleteMovieNotFound{}
}

// WithPayload adds the payload to the delete movie not found response
func (o *DeleteMovieNotFound) WithPayload(payload *models.Error) *DeleteMovieNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete movie not found response
func (o *DeleteMovieNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMovieNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteMovieConflictCode is the HTTP code returned for type DeleteMovieConflict
const DeleteMovieConflictCode int = 409

/*DeleteMovieConflict Conflict

swagger:response deleteMovieConflict
*/
type DeleteMovieConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteMovieConflict creates DeleteMovieConflict with default headers values
func NewDeleteMovieConflict() *DeleteMovieConflict {

	return &DeleteMovieConflict{}
}

// WithPayload adds the payload to the delete movie conflict response
func (o *DeleteMovieConflict) WithPayload(payload *models.Error) *DeleteMovieConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete movie conflict response
func (o *DeleteMovieConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMovieConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteMovieInternalServerErrorCode is the HTTP code returned for type DeleteMovieInternalServerError
const DeleteMovieInternalServerErrorCode int = 500

/*DeleteMovieInternalServerError Internal Server Error

swagger:response deleteMovieInternalServerError
*/
type DeleteMovieInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteMovieInternalServerError creates DeleteMovieInternalServerError with default headers values
func NewDeleteMovieInternalServerError() *DeleteMovieInternalServerError {

	return &DeleteMovieInternalServerError{}
}

// WithPayload adds the payload to the delete movie internal server error response
func (o *DeleteMovieInternalServerError) WithPayload(payload *models.Error) *DeleteMovieInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete movie internal server error response
func (o *DeleteMovieInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMovieInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
