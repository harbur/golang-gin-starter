// Code generated by go-swagger; DO NOT EDIT.

package movies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutMovieHandlerFunc turns a function with the right signature into a put movie handler
type PutMovieHandlerFunc func(PutMovieParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutMovieHandlerFunc) Handle(params PutMovieParams) middleware.Responder {
	return fn(params)
}

// PutMovieHandler interface for that can handle valid put movie params
type PutMovieHandler interface {
	Handle(PutMovieParams) middleware.Responder
}

// NewPutMovie creates a new http.Handler for the put movie operation
func NewPutMovie(ctx *middleware.Context, handler PutMovieHandler) *PutMovie {
	return &PutMovie{Context: ctx, Handler: handler}
}

/*PutMovie swagger:route PUT /api/movies/{id} movies putMovie

Update movie

Updates a movie.

*/
type PutMovie struct {
	Context *middleware.Context
	Handler PutMovieHandler
}

func (o *PutMovie) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutMovieParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
