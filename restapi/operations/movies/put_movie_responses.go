// Code generated by go-swagger; DO NOT EDIT.

package movies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/harbur/golang-gin-starter/pkgs/models"
)

// PutMovieOKCode is the HTTP code returned for type PutMovieOK
const PutMovieOKCode int = 200

/*PutMovieOK OK

swagger:response putMovieOK
*/
type PutMovieOK struct {

	/*
	  In: Body
	*/
	Payload *models.Movie `json:"body,omitempty"`
}

// NewPutMovieOK creates PutMovieOK with default headers values
func NewPutMovieOK() *PutMovieOK {

	return &PutMovieOK{}
}

// WithPayload adds the payload to the put movie o k response
func (o *PutMovieOK) WithPayload(payload *models.Movie) *PutMovieOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put movie o k response
func (o *PutMovieOK) SetPayload(payload *models.Movie) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMovieOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutMovieNotFoundCode is the HTTP code returned for type PutMovieNotFound
const PutMovieNotFoundCode int = 404

/*PutMovieNotFound Not Found

swagger:response putMovieNotFound
*/
type PutMovieNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutMovieNotFound creates PutMovieNotFound with default headers values
func NewPutMovieNotFound() *PutMovieNotFound {

	return &PutMovieNotFound{}
}

// WithPayload adds the payload to the put movie not found response
func (o *PutMovieNotFound) WithPayload(payload *models.Error) *PutMovieNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put movie not found response
func (o *PutMovieNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMovieNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutMovieConflictCode is the HTTP code returned for type PutMovieConflict
const PutMovieConflictCode int = 409

/*PutMovieConflict Conflict

swagger:response putMovieConflict
*/
type PutMovieConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutMovieConflict creates PutMovieConflict with default headers values
func NewPutMovieConflict() *PutMovieConflict {

	return &PutMovieConflict{}
}

// WithPayload adds the payload to the put movie conflict response
func (o *PutMovieConflict) WithPayload(payload *models.Error) *PutMovieConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put movie conflict response
func (o *PutMovieConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMovieConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutMovieInternalServerErrorCode is the HTTP code returned for type PutMovieInternalServerError
const PutMovieInternalServerErrorCode int = 500

/*PutMovieInternalServerError Internal Server Error

swagger:response putMovieInternalServerError
*/
type PutMovieInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutMovieInternalServerError creates PutMovieInternalServerError with default headers values
func NewPutMovieInternalServerError() *PutMovieInternalServerError {

	return &PutMovieInternalServerError{}
}

// WithPayload adds the payload to the put movie internal server error response
func (o *PutMovieInternalServerError) WithPayload(payload *models.Error) *PutMovieInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put movie internal server error response
func (o *PutMovieInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMovieInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
