// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Golang Starter",
    "title": "Golang Starter",
    "version": "1.0.0"
  },
  "paths": {
    "/api/movies": {
      "get": {
        "description": "Lists all movies.",
        "tags": [
          "movies"
        ],
        "summary": "List movies",
        "operationId": "getMovies",
        "responses": {
          "200": {
            "$ref": "#/responses/movies"
          },
          "409": {
            "$ref": "#/responses/conflict"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "description": "Creates a movie.",
        "tags": [
          "movies"
        ],
        "summary": "Create movie",
        "operationId": "postMovie",
        "parameters": [
          {
            "$ref": "#/parameters/movie"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/movie"
          },
          "409": {
            "$ref": "#/responses/conflict"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/api/movies/{id}": {
      "get": {
        "description": "Gets a movie.",
        "tags": [
          "movies"
        ],
        "summary": "Get movie",
        "operationId": "getMovie",
        "responses": {
          "200": {
            "$ref": "#/responses/movie"
          },
          "404": {
            "$ref": "#/responses/notfound"
          },
          "409": {
            "$ref": "#/responses/conflict"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "put": {
        "description": "Updates a movie.",
        "tags": [
          "movies"
        ],
        "summary": "Update movie",
        "operationId": "putMovie",
        "parameters": [
          {
            "$ref": "#/parameters/movie"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/movie"
          },
          "404": {
            "$ref": "#/responses/notfound"
          },
          "409": {
            "$ref": "#/responses/conflict"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "delete": {
        "description": "Deletes a movie.",
        "tags": [
          "movies"
        ],
        "summary": "Delete movie",
        "operationId": "deleteMovie",
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/notfound"
          },
          "409": {
            "$ref": "#/responses/conflict"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/id"
        }
      ]
    },
    "/healthz": {
      "get": {
        "description": "Returns status code 200 when service is online.",
        "tags": [
          "healthz"
        ],
        "summary": "Returns a health check",
        "operationId": "healthz",
        "responses": {
          "200": {
            "$ref": "#/responses/healthz"
          }
        }
      }
    }
  },
  "definitions": {
    "buildInfo": {
      "type": "object",
      "required": [
        "buildDate",
        "gitBranch",
        "gitCommit",
        "gitState",
        "gitSummary"
      ],
      "properties": {
        "buildDate": {
          "type": "string"
        },
        "gitBranch": {
          "type": "string"
        },
        "gitCommit": {
          "type": "string"
        },
        "gitState": {
          "type": "string"
        },
        "gitSummary": {
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "healthz": {
      "type": "object",
      "required": [
        "buildInfo"
      ],
      "properties": {
        "buildInfo": {
          "type": "object",
          "$ref": "#/definitions/buildInfo"
        }
      }
    },
    "movie": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "movies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/movie"
      }
    }
  },
  "parameters": {
    "id": {
      "type": "integer",
      "description": "Identifier",
      "name": "id",
      "in": "path",
      "required": true
    },
    "movie": {
      "name": "movie",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/movie"
      }
    }
  },
  "responses": {
    "conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "healthz": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/healthz"
      }
    },
    "internal": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "movie": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/movie"
      }
    },
    "movies": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/movies"
      }
    },
    "notfound": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "ok": {
      "description": "OK"
    }
  },
  "tags": [
    {
      "description": "Health checks",
      "name": "healthz"
    },
    {
      "description": "Manage Movies",
      "name": "movies"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Golang Starter",
    "title": "Golang Starter",
    "version": "1.0.0"
  },
  "paths": {
    "/api/movies": {
      "get": {
        "description": "Lists all movies.",
        "tags": [
          "movies"
        ],
        "summary": "List movies",
        "operationId": "getMovies",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/movies"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "Creates a movie.",
        "tags": [
          "movies"
        ],
        "summary": "Create movie",
        "operationId": "postMovie",
        "parameters": [
          {
            "name": "movie",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/movie"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/movie"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/api/movies/{id}": {
      "get": {
        "description": "Gets a movie.",
        "tags": [
          "movies"
        ],
        "summary": "Get movie",
        "operationId": "getMovie",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/movie"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "description": "Updates a movie.",
        "tags": [
          "movies"
        ],
        "summary": "Update movie",
        "operationId": "putMovie",
        "parameters": [
          {
            "name": "movie",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/movie"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/movie"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a movie.",
        "tags": [
          "movies"
        ],
        "summary": "Delete movie",
        "operationId": "deleteMovie",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Identifier",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/healthz": {
      "get": {
        "description": "Returns status code 200 when service is online.",
        "tags": [
          "healthz"
        ],
        "summary": "Returns a health check",
        "operationId": "healthz",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/healthz"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "buildInfo": {
      "type": "object",
      "required": [
        "buildDate",
        "gitBranch",
        "gitCommit",
        "gitState",
        "gitSummary"
      ],
      "properties": {
        "buildDate": {
          "type": "string"
        },
        "gitBranch": {
          "type": "string"
        },
        "gitCommit": {
          "type": "string"
        },
        "gitState": {
          "type": "string"
        },
        "gitSummary": {
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "healthz": {
      "type": "object",
      "required": [
        "buildInfo"
      ],
      "properties": {
        "buildInfo": {
          "type": "object",
          "$ref": "#/definitions/buildInfo"
        }
      }
    },
    "movie": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "movies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/movie"
      }
    }
  },
  "parameters": {
    "id": {
      "type": "integer",
      "description": "Identifier",
      "name": "id",
      "in": "path",
      "required": true
    },
    "movie": {
      "name": "movie",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/movie"
      }
    }
  },
  "responses": {
    "conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "healthz": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/healthz"
      }
    },
    "internal": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "movie": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/movie"
      }
    },
    "movies": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/movies"
      }
    },
    "notfound": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "ok": {
      "description": "OK"
    }
  },
  "tags": [
    {
      "description": "Health checks",
      "name": "healthz"
    },
    {
      "description": "Manage Movies",
      "name": "movies"
    }
  ]
}`))
}
